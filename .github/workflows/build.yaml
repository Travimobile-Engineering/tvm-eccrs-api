name: tvm-eccrs-api CI/CD

on:
  push:
    branches:
      - 'feature/*'

jobs:
  check-for-leaked-secrets:
    runs-on: ubuntu-latest
    container:
      image: zricethezav/gitleaks:v8.26.0
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Scan code for leaked secrets
        run: gitleaks detect --verbose --source . -f json -r gitleaks.json

      - name: Install Python & requests
        if: always()
        run: |
          apk update && apk add --no-cache python3 py3-pip
          python3 -m venv venv
          . venv/bin/activate
          pip install --upgrade pip
          pip install requests

      - name: Upload Gitleaks report to DefectDojo
        if: failure()
        env:
          DEFECT_DOJO_FILE: gitleaks.json
          DEFECT_DOJO_ENGAGEMENT: 1
          DEFECT_DOJO_API_TOKEN: ${{ secrets.DEFECT_DOJO_API_TOKEN }}
          DEFECT_DOJO_SCAN_TYPE: Gitleaks Scan
          DEFECT_DOJO_URL: https://defectdojo.travimobile.com/api/v2/import-scan/
          DEFECT_DOJO_PRODUCT_NAME: tvm-eccrs-api
        run: python upload-scan-report.py

      - name: Notify Slack on Gitleaks failure
        if: failure()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            text: "*Gitleaks Failure in tvm-eccrs-api*: ${{ job.status }} on branch ${{ github.ref_name }}"

  dependency-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Install Composer dependencies
        run: composer install --no-dev --prefer-dist --no-interaction

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install JavaScript dependencies (if needed)
        run: npm install

      - name: Run OWASP Dependency Check
        run: |
          chmod +x dependency-check.sh
          ./dependency-check.sh
          mkdir -p ./dc-data ./reports
          dependency-check \
            --nvdApiDelay 7000 \
            --nvdApiKey ${{ secrets.NVD_API }} \
            --data ./dc-data \
            --scan . \
            --log ./reports/dependency-check.log \
            --enableExperimental \
            --format JSON \
            --format XML \
            --failOnCVSS 4.0 \
            --out reports/

      - name: Upload Dependency Check report to DefectDojo
        if: failure()
        env:
          DEFECT_DOJO_FILE: ./reports/dependency-check-report.xml
          DEFECT_DOJO_ENGAGEMENT: 1
          DEFECT_DOJO_API_TOKEN: ${{ secrets.DEFECT_DOJO_API_TOKEN }}
          DEFECT_DOJO_SCAN_TYPE: Dependency Check Scan
          DEFECT_DOJO_URL: https://defectdojo.travimobile.com/api/v2/import-scan/
          DEFECT_DOJO_PRODUCT_NAME: tvm-eccrs-api
        run: python upload-scan-report.py

      - name: Notify Slack on dependency scan failure
        if: failure()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            text: "*Dependency Scan Failure in tvm-eccrs-api*: ${{ job.status }} on branch ${{ github.ref_name }}"

  SAST-scan:
    runs-on: ubuntu-latest
    container:
      image: semgrep/semgrep
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Semgrep scan
        run: semgrep scan --config=auto --error --verbose --json --output semgrep.json

      - name: Upload Semgrep report to DefectDojo
        if: failure()
        env:
          DEFECT_DOJO_FILE: semgrep.json
          DEFECT_DOJO_ENGAGEMENT: 1
          DEFECT_DOJO_API_TOKEN: ${{ secrets.DEFECT_DOJO_API_TOKEN }}
          DEFECT_DOJO_SCAN_TYPE: Semgrep JSON Report
          DEFECT_DOJO_URL: https://defectdojo.travimobile.com/api/v2/import-scan/
          DEFECT_DOJO_PRODUCT_NAME: tvm-eccrs-api
        run: python upload-scan-report.py

      - name: Notify Slack on SAST failure
        if: failure()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            text: "*SAST Scan Failure in tvm-eccrs-api*: ${{ job.status }} on branch ${{ github.ref_name }}"

  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, bcmath, intl
          tools: composer

      - name: Install dependencies
        run: composer install

      - name: Set up .env
        run: cp .env.example .env && php artisan key:generate

      - name: Run unit tests
        run: vendor/bin/phpunit --coverage-text || echo "Tests failed"

      - name: Notify Slack on unit test failure
        if: failure()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            text: "*Unit Tests Failed in tvm-eccrs-api*: ${{ job.status }} on branch ${{ github.ref_name }}"
